server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # Docker service discovery approach
  - job_name: docker-service-discovery
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: label
            values: ["logging=promtail"]
    
    relabel_configs:
      # Extract container name from Docker metadata
      - source_labels: ['__meta_docker_container_name']
        regex: '/(.*)'
        target_label: 'container_name'
        replacement: '${1}'
      
      # Add service name if available
      - source_labels: ['__meta_docker_container_label_com_docker_compose_service']
        target_label: 'service_name'
        regex: '(.+)'
        replacement: '${1}'
      
      # Set the log path
      - source_labels: ['__meta_docker_container_id']
        target_label: '__path__'
        regex: '(.+)'
        replacement: '/var/lib/docker/containers/${1}/*log'

    pipeline_stages:
      - docker: {}
      - labels:
          container_name:
          service_name:

  # Fallback static configuration for all containers
  - job_name: docker-static
    static_configs:
      - targets:
          - localhost
        labels:
          job: docker-static
          __path__: /var/lib/docker/containers/*/*log
    
    pipeline_stages:
      # Parse the JSON log format
      - json:
          expressions:
            output: log
            stream: stream
            time: time
            attrs: attrs
      
      # Extract container ID from file path
      - regex:
          expression: '/var/lib/docker/containers/(?P<container_id>[a-f0-9]{12})[a-f0-9]{52}/.*'
          source: filename
      
      # Map short container IDs to known container names
      - template:
          source: container_id
          template: |
            {{ if eq .container_id "1335677d667d" }}cadvisor
            {{ else if eq .container_id "b2f40d7c1b86" }}nginx  
            {{ else if eq .container_id "8c4ae4164e05" }}grafana
            {{ else if eq .container_id "e873776e022d" }}promtail
            {{ else if eq .container_id "2629aed3ca7d" }}loki
            {{ else if eq .container_id "66bb1f376a56" }}prometheus
            {{ else if eq .container_id "27dd2c5eff20" }}node-exporter
            {{ else if eq .container_id "9af8d570f245" }}backend
            {{ else if eq .container_id "2666317c91ef" }}jaeger
            {{ else }}{{ .container_id }}{{ end }}
      
      # Set the mapped name as container_name
      - template:
          source: container_name
          template: '{{ .Value }}'
      
      # Set timestamp
      - timestamp:
          format: RFC3339Nano
          source: time
      
      # Add labels
      - labels:
          stream:
          container_id:
          container_name:
      
      # Output
      - output:
          source: output