basePath: /api/v1/auth
definitions:
  controller.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  middelware.TokenValidationRequest:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  models.APIError:
    properties:
      details:
        description: More context about the error
        type: string
      field:
        description: For validation errors (which field failed)
        type: string
      type:
        description: e.g., "ValidationError", "DatabaseError"
        type: string
    type: object
  models.APIResponse:
    properties:
      code:
        description: HTTP status code (200, 400, 500, etc.)
        type: integer
      data:
        description: Any response data (can be map, struct, list, etc.)
      error:
        allOf:
        - $ref: '#/definitions/models.APIError'
        description: Detailed error info (nil if success)
      message:
        description: Human-readable message
        type: string
      status:
        description: '"success" or "error"'
        type: string
    type: object
  models.Organization:
    properties:
      address:
        maxLength: 200
        type: string
      city:
        maxLength: 50
        minLength: 2
        type: string
      country:
        maxLength: 50
        minLength: 2
        type: string
      created_at:
        type: string
      created_by:
        description: Audit fields
        type: string
      description:
        maxLength: 500
        type: string
      email:
        type: string
      id:
        type: string
      industry:
        maxLength: 50
        minLength: 2
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
      phone:
        type: string
      postal_code:
        description: Business details
        maxLength: 20
        minLength: 3
        type: string
      state:
        maxLength: 50
        minLength: 2
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.OrganizationStatus'
        enum:
        - active
        - inactive
        - suspended
      updated_at:
        type: string
      updated_by:
        description: Contact information
        type: string
    required:
    - name
    - status
    type: object
  models.OrganizationStatus:
    enum:
    - active
    - inactive
    - suspended
    type: string
    x-enum-varnames:
    - OrganizationStatusActive
    - OrganizationStatusInactive
    - OrganizationStatusSuspended
  models.RegisterUser:
    description: User registration request with account details
    properties:
      company_name:
        example: Acme Corp
        type: string
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      password:
        example: securePassword123
        minLength: 8
        type: string
      phone:
        example: "+1234567890"
        type: string
      username:
        example: john_doe
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - username
    type: object
  models.RoleAssignment:
    properties:
      assigned_at:
        type: string
      context:
        additionalProperties:
          type: string
        type: object
      expires_at:
        type: string
      level:
        maximum: 10
        minimum: 1
        type: integer
      permissions:
        items:
          type: string
        minItems: 1
        type: array
      role_id:
        type: string
      role_name:
        maxLength: 50
        minLength: 2
        type: string
    required:
    - level
    - permissions
    - role_name
    type: object
  models.User:
    properties:
      account_locked_until:
        type: string
      created_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      failed_login_attempts:
        type: integer
      first_name:
        type: string
      id:
        type: string
      last_login_at:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
      preferences:
        additionalProperties: true
        type: object
      role:
        allOf:
        - $ref: '#/definitions/models.UserRole'
        description: Keep for backward compatibility
      roles:
        items:
          $ref: '#/definitions/models.RoleAssignment'
        type: array
      status:
        $ref: '#/definitions/models.UserStatus'
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.UserRole:
    enum:
    - user
    - admin
    - moderator
    type: string
    x-enum-varnames:
    - UserRoleUser
    - UserRoleAdmin
    - UserRoleModerator
  models.UserStatus:
    enum:
    - active
    - inactive
    - suspended
    - pending_verification
    type: string
    x-enum-varnames:
    - UserStatusActive
    - UserStatusInactive
    - UserStatusSuspended
    - UserStatusPendingVerification
  models.WorkerRestartRequest:
    properties:
      force:
        description: Force restart even if worker is currently running
        type: boolean
    type: object
host: localhost:8081
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: "FieldFuze Backend API with DynamoDB and Telnyx Integration\n\n## \U0001F525
    AUTHENTICATION FLOW:\n### Step 1: Register Customer\n**POST /auth/register** -
    Create customer account (no token generated)\n`{\"email\": \"user@example.com\",
    \"username\": \"john\", \"password\": \"pass123\", \"first_name\": \"John\", \"last_name\":
    \"Doe\"}`\n\n## \U0001F680 QUICK AUTHENTICATION:\n### Using the Authorize Button
    (Recommended)\n1. Click the **\U0001F513 Authorize** button (top right of any
    API section)\n2. In the authorization dialog, use the **Login** form:\n- Enter
    your **Username** (email)\n- Enter your **Password**\n- Click **Login** button\n3.
    Your Bearer token will be **automatically applied** to all API calls!\n4. All
    protected endpoints will now work without manual token entry\n\n### Manual Token
    Entry (Alternative)\nIf you prefer manual setup: Get token from `/auth/login`,
    then paste `Bearer YOUR_TOKEN` in the Authorization field"
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: FieldFuze Backend API
  version: "1.0"
paths:
  /infrastructure/worker/auto-restart:
    post:
      consumes:
      - application/json
      description: Check worker health and automatically restart if unhealthy
      produces:
      - application/json
      responses:
        "200":
          description: Auto-restart check completed
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized - Authentication required
          schema:
            $ref: '#/definitions/models.APIResponse'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Failed to auto-restart worker
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: Auto-restart worker if needed
      tags:
      - Infrastructure
  /infrastructure/worker/health:
    get:
      consumes:
      - application/json
      description: Check if the infrastructure worker is healthy and get health details
      produces:
      - application/json
      responses:
        "200":
          description: Worker health check completed
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized - Authentication required
          schema:
            $ref: '#/definitions/models.APIResponse'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Failed to check worker health
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: Check worker health
      tags:
      - Infrastructure
  /infrastructure/worker/restart:
    post:
      consumes:
      - application/json
      description: Restart the infrastructure worker with optional force parameter
        to restart even if currently running
      parameters:
      - description: Worker restart options
        in: body
        name: request
        schema:
          $ref: '#/definitions/models.WorkerRestartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Worker restart initiated successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request - Invalid restart request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized - Authentication required
          schema:
            $ref: '#/definitions/models.APIResponse'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/models.APIResponse'
        "409":
          description: Conflict - Worker is running and force=false
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Failed to restart worker
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: Restart infrastructure worker
      tags:
      - Infrastructure
  /infrastructure/worker/status:
    get:
      consumes:
      - application/json
      description: Retrieve detailed status of the infrastructure worker including
        execution state, progress, and health
      produces:
      - application/json
      responses:
        "200":
          description: Worker status retrieved successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized - Authentication required
          schema:
            $ref: '#/definitions/models.APIResponse'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Failed to retrieve worker status
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: Get worker execution status
      tags:
      - Infrastructure
  /organization:
    post:
      consumes:
      - application/json
      description: Create a new organization with specified details
      parameters:
      - description: Create organization request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Organization'
      produces:
      - application/json
      responses:
        "201":
          description: Organization created successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request - Invalid organization data
          schema:
            $ref: '#/definitions/models.APIResponse'
        "409":
          description: Conflict - Organization already exists
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Organization creation failed
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: Create a new organization
      tags:
      - Organization Management
  /user/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details retrieved successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request - Invalid user ID
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found - User does not exist
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Failed to retrieve user
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: Get user details
      tags:
      - User Management
  /user/{user_id}/role/{role_id}:
    delete:
      consumes:
      - application/json
      description: Remove an existing role from a user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role removed successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request - Invalid user ID or role ID
          schema:
            $ref: '#/definitions/models.APIResponse'
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found - User or role does not exist
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Failed to remove role
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: Remove role from user
      tags:
      - User Management
    post:
      consumes:
      - application/json
      description: Assign an existing role by ID to a user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role assigned successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request - Invalid user ID or role ID
          schema:
            $ref: '#/definitions/models.APIResponse'
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found - User or role does not exist
          schema:
            $ref: '#/definitions/models.APIResponse'
        "409":
          description: Conflict - User already has this role
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Failed to assign role
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: Assign existing role to user
      tags:
      - User Management
  /user/list:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all users
      parameters:
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of users per page
        in: query
        name: limit
        type: integer
      - description: Sort order (e.g., 'asc' or 'desc')
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User list retrieved successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Failed to retrieve user list
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: Get list of users
      tags:
      - User Management
  /user/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful, returns JWT token
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request - Invalid login data
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized - Invalid credentials
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Login failed
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: User login
      tags:
      - Authentication
  /user/logout:
    post:
      consumes:
      - application/json
      description: Logout user and revoke current JWT token
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Logout failed
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - Authentication
  /user/organization:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all organizations
      parameters:
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of organizations per page
        in: query
        name: limit
        type: integer
      - description: Filter by organization status (active, inactive, archived)
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Organizations retrieved successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Failed to retrieve organizations
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: Get all organizations
      tags:
      - Organization Management
  /user/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: Registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterUser'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request - Invalid registration data
          schema:
            $ref: '#/definitions/models.APIResponse'
        "409":
          description: Conflict - User already exists
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Registration failed
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Register a new user
      tags:
      - Authentication
  /user/role:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all roles
      parameters:
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of roles per page
        in: query
        name: limit
        type: integer
      - description: Filter by role status (active, inactive, archived)
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Roles retrieved successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Failed to retrieve roles
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: Get all roles
      tags:
      - Role Management
    post:
      consumes:
      - application/json
      description: Create a new role with specified permissions
      parameters:
      - description: Create role assignment request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RoleAssignment'
      produces:
      - application/json
      responses:
        "201":
          description: Role created successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request - Invalid role data
          schema:
            $ref: '#/definitions/models.APIResponse'
        "409":
          description: Conflict - Role already exists
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Role creation failed
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: Create a new role
      tags:
      - Role Management
  /user/role/{id}:
    delete:
      consumes:
      - application/json
      description: Delete role by ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role deleted successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request - Invalid role ID
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found - Role does not exist
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Failed to delete role
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: Delete role by ID
      tags:
      - Role Management
    get:
      consumes:
      - application/json
      description: Retrieve role details by ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role details retrieved successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request - Invalid role ID
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found - Role does not exist
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Failed to retrieve role
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: Get role by ID
      tags:
      - Role Management
    put:
      consumes:
      - application/json
      description: Update role information by ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: Update role assignment request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RoleAssignment'
      produces:
      - application/json
      responses:
        "200":
          description: Role updated successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request - Invalid role ID or data
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found - Role does not exist
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Failed to update role
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: Update role by ID
      tags:
      - Role Management
  /user/token:
    post:
      consumes:
      - application/json
      description: Generate or refresh JWT token (legacy endpoint - use /login instead)
      parameters:
      - description: Token generation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: Token generated successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request - Invalid token request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized - Invalid credentials
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Token generation failed
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Generate JWT token
      tags:
      - Authentication
  /user/update/{id}:
    patch:
      consumes:
      - application/json
      description: 'Update user information by ID. Note: Role and Roles fields are
        ignored - use dedicated role assignment endpoints instead.'
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Update user request (role/roles fields will be ignored)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request - Invalid user ID or data
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found - User does not exist
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Failed to update user
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: Update user details
      tags:
      - User Management
  /user/validate:
    post:
      consumes:
      - application/json
      description: Validate a JWT token and return user information with roles
      parameters:
      - description: Token validation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/middelware.TokenValidationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token is valid
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request - Missing or invalid token in request body
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized - Invalid or expired token
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Validate JWT token
      tags:
      - Authentication
securityDefinitions:
  BearerAuth:
    description: JWT Authorization header using the Bearer scheme. Enter 'Bearer'
      [space] and then your token in the text input below.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
