basePath: /api/v1
definitions:
  models.APIError:
    properties:
      details:
        description: More context about the error
        type: string
      field:
        description: For validation errors (which field failed)
        type: string
      type:
        description: e.g., "ValidationError", "DatabaseError"
        type: string
    type: object
  models.APIResponse:
    properties:
      code:
        description: HTTP status code (200, 400, 500, etc.)
        type: integer
      data:
        description: Any response data (can be map, struct, list, etc.)
      error:
        allOf:
        - $ref: '#/definitions/models.APIError'
        description: Detailed error info (nil if success)
      message:
        description: Human-readable message
        type: string
      status:
        description: '"success" or "error"'
        type: string
    type: object
  models.RegisterUser:
    description: User registration request with account details
    properties:
      company_name:
        example: Acme Corp
        type: string
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      password:
        example: securePassword123
        minLength: 8
        type: string
      phone:
        example: "+1234567890"
        type: string
      username:
        example: john_doe
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - username
    type: object
host: localhost:8081
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: "FieldFuze Backend API with DynamoDB and Telnyx Integration\n\n## \U0001F525
    AUTHENTICATION FLOW:\n### Step 1: Register Customer\n**POST /auth/register** -
    Create customer account (no token generated)\n`{\"email\": \"user@example.com\",
    \"username\": \"john\", \"password\": \"pass123\", \"first_name\": \"John\", \"last_name\":
    \"Doe\"}`\n\n## \U0001F680 QUICK AUTHENTICATION:\n### Using the Authorize Button
    (Recommended)\n1. Click the **\U0001F513 Authorize** button (top right of any
    API section)\n2. In the authorization dialog, use the **Login** form:\n- Enter
    your **Username** (email)\n- Enter your **Password**\n- Click **Login** button\n3.
    Your Bearer token will be **automatically applied** to all API calls!\n4. All
    protected endpoints will now work without manual token entry\n\n### Manual Token
    Entry (Alternative)\nIf you prefer manual setup: Get token from `/auth/login`,
    then paste `Bearer YOUR_TOKEN` in the Authorization field"
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: FieldFuze Backend API
  version: "1.0"
paths:
  /auth/user/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details retrieved successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request - Invalid user ID
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found - User does not exist
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Failed to retrieve user
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get user details
      tags:
      - User Management
  /auth/user/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: Registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterUser'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request - Invalid registration data
          schema:
            $ref: '#/definitions/models.APIResponse'
        "409":
          description: Conflict - User already exists
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Registration failed
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Register a new user
      tags:
      - Authentication
  /auth/user/token:
    post:
      consumes:
      - application/json
      description: Generate or refresh JWT token
      parameters:
      - description: Token generation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterUser'
      produces:
      - application/json
      responses:
        "200":
          description: Token generated successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request - Invalid token request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error - Token generation failed
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Generate JWT token
      tags:
      - Token Management
securityDefinitions:
  BearerAuth:
    description: JWT Authorization header using the Bearer scheme. Enter 'Bearer'
      [space] and then your token in the text input below.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
