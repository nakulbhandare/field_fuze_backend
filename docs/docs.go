// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/register": {
            "post": {
                "description": "Create a new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Registration request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RegisterUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid registration data",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict - User already exists",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Registration failed",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse"
                        }
                    }
                }
            }
        },
        "/auth/token": {
            "post": {
                "description": "Generate or refresh JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Token Management"
                ],
                "summary": "Generate JWT token",
                "parameters": [
                    {
                        "description": "Token generation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RegisterUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token generated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid token request",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Token generation failed",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.APIError": {
            "type": "object",
            "properties": {
                "details": {
                    "description": "More context about the error",
                    "type": "string"
                },
                "field": {
                    "description": "For validation errors (which field failed)",
                    "type": "string"
                },
                "type": {
                    "description": "e.g., \"ValidationError\", \"DatabaseError\"",
                    "type": "string"
                }
            }
        },
        "models.APIResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code (200, 400, 500, etc.)",
                    "type": "integer"
                },
                "data": {
                    "description": "Any response data (can be map, struct, list, etc.)"
                },
                "error": {
                    "description": "Detailed error info (nil if success)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.APIError"
                        }
                    ]
                },
                "message": {
                    "description": "Human-readable message",
                    "type": "string"
                },
                "status": {
                    "description": "\"success\" or \"error\"",
                    "type": "string"
                }
            }
        },
        "models.RegisterUser": {
            "description": "User registration request with account details",
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password",
                "username"
            ],
            "properties": {
                "company_name": {
                    "type": "string",
                    "example": "Acme Corp"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "securePassword123"
                },
                "phone": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "username": {
                    "type": "string",
                    "example": "john_doe"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "JWT Authorization header using the Bearer scheme. Enter 'Bearer' [space] and then your token in the text input below.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8081",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "FieldFuze Backend API",
	Description:      "FieldFuze Backend API with DynamoDB and Telnyx Integration\n\n## ðŸ”¥ AUTHENTICATION FLOW:\n### Step 1: Register Customer\n**POST /auth/register** - Create customer account (no token generated)\n`{\"email\": \"user@example.com\", \"username\": \"john\", \"password\": \"pass123\", \"first_name\": \"John\", \"last_name\": \"Doe\"}`\n\n## ðŸš€ QUICK AUTHENTICATION:\n### Using the Authorize Button (Recommended)\n1. Click the **ðŸ”“ Authorize** button (top right of any API section)\n2. In the authorization dialog, use the **Login** form:\n- Enter your **Username** (email)\n- Enter your **Password**\n- Click **Login** button\n3. Your Bearer token will be **automatically applied** to all API calls!\n4. All protected endpoints will now work without manual token entry\n\n### Manual Token Entry (Alternative)\nIf you prefer manual setup: Get token from `/auth/login`, then paste `Bearer YOUR_TOKEN` in the Authorization field",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
